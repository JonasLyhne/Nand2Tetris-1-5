// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=instruction[3], b=instruction[15], out=writeM);

    Mux16(a=instruction, b=mux1In, sel=instruction[15], out=mux1Out); 
    // Register A load
    And(a=instruction[5], b=instruction[15], out=and1Out);
    Not(in=instruction[15], out=not15);
    Or(a=and1Out, b=not15, out=regALoad);
    // End
    ARegister(in=mux1Out, load=regALoad, out=regAOut, out=regAOutPc, out[0..14]=addressM); // Register A

    Mux16(a=regAOut, b=inM, sel=instruction[12], out=mux2Out);

    And(a=instruction[4], b=instruction[15], out=regDLoad);
    DRegister(in=regDIn, load=regDLoad, out=regDOut); // Register D

    ALU(x=regDOut, y=mux2Out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=regDIn, out=mux1In, zr=zr, ng=ng);


    And(a=instruction[0], b=instruction[15], out=and015Out); // 0 - 15
    And(a=instruction[1], b=instruction[15], out=and115Out); // 1 - 15
    And(a=instruction[2], b=instruction[15], out=and215Out); // 2 - 15

    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);
    And(a=notZr, b=notNg, out=notAndOut);

    And(a=and015Out, b=notAndOut, out=ins015Andnotzrng);
    And(a=and115Out, b=zr, out=ins115AndZr);
    Or(a=ins015Andnotzrng, b=ins115AndZr, out=or1Out);
    And(a=and215Out, b=ng, out=ins215andNgOut);
    Or(a=ins215andNgOut, b=or1Out, out=pcLoad, out=notPcLoad);
    Not(in=notPcLoad, out=incPc);

    PC(in=regAOutPc, load=pcLoad, inc=incPc, reset=reset, out[0..14]=pc);



}